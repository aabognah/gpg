title 'Foo Config'

control 'services' do
  describe service('haveged') do
    it { should be_installed }
    it { should be_running }
  end
end

control 'root key' do
  describe file('/tmp/gpg_batch_config_foo') do
    it { should exist }
    its(:content) { should match(/%commit/) }
    its(:content) { should match(/foo/) }
  end

  describe file('/tmp/gpg_batch_config_bar') do
    it { should exist }
    its(:content) { should match(/%commit/) }
    its(:content) { should match(/bar/) }
  end

  describe bash('sudo -u root -i gpg2 --list-keys') do
    its('exit_status') { should eq 0 }
    its('stdout') { should match /Chef Generated Default \(foo\) \(generated by Chef\)/ }
    its('stdout') { should match /Chef Generated Default \(bar\) \(generated by Chef\)/ }
  end
end

control 'Vagrant Key' do
  describe file('/tmp/vagrant_config') do
    it { should exist }
    its(:content) { should match(/%commit/) }
    its(:content) { should match(/vagrant/) }
  end

  describe bash('sudo -u vagrant -i gpg2 --list-keys') do
    its('exit_status') { should eq 0 }
    its('stdout') { should match /vagrant \(vagrant test key\)/ }
  end
end

control 'Export key to file' do
  describe file('/tmp/vagrant.key') do
    it { should exist }
    its(:content) { should match(/BEGIN PGP PUBLIC KEY BLOCK/) }
  end
end

control 'Import key from file' do
  desc 'The root users keychain should contain the imported keys'

  describe bash('sudo -u root -i gpg2 --list-keys') do
    its('exit_status') { should eq 0 }
    its('stdout') { should match /vagrant \(vagrant test key\)/ }
  end
end

control 'Delete public key' do
  desc 'The root users key list should not contain the key we delete'

  describe bash('sudo -u root -i gpg2 --list-keys') do
    its('exit_status') { should eq 0 }
    its('stdout') { should match /Chef Generated Default \(foo\) \(generated by Chef\)/ }
    its('stdout') { should match /Chef Generated Default \(bar\) \(generated by Chef\)/ }
  end
end

control 'Delete secret key' do
  desc 'The key we asked to delete should not exist'

  describe bash('sudo -u root -i gpg2 --list-keys --fingerprint') do
    its('exit_status') { should eq 0 }
    its('stdout') { should_not match /Chef Generated Default \(dummy\) \(generated by Chef\)/ }
  end
end
